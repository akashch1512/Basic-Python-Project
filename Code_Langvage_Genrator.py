import random
#This program genrates code langvage that cant be understanded by everyone! 
#this program will encode and decode that text which is entered

#welcome text
Welcome="* Welcome to code langvage genrator made by akash *\n"
print(Welcome.upper().center(110))

#Encoder or Decoder are Choosen here
while True: # error handling
    try:
        print("Do you want encoder [TYPE 0 FOR THAT] or decoder [TYPE 1 FOR THAT]..?\n",sep=None,end=None)
        choice=int(input())
        if choice==0 or 1:
            break
    
    except:
        print("\nError occured..! please try again! \n",sep=None,end=None)

#user text input are taken here
try:
    user_text=input("\nPlease enter the text that you want to convert :\n")
    print("\nYour text is in safe hand : ) , don't worry...!\n\nHere's your converted code!\n",sep=None,end=None)

except:
    print("\nError occured..! please try again! \n",sep=None,end=None)
    exit()

#encoding is done here
if choice==0:
    user_text=user_text.split()  #changing sentance to list
    try:
        for word in (user_text):
            lenword=len(word)
            if lenword<3 and lenword>0 : # for less than 3 letters
                rev="" # block to reverse a list's every element
                for letter in word:
                    
                    rev=letter+rev
                print(rev,end=' ')
            
            else:
                word3=word[0] # 1 st aplhabate moved to last ! 
                word1=word[1:]
                word1=word1+word3
                
                #random varibale list
                r_l=['g','e','y','a','h','c','k','t','j'] # block of code to put 3-3 random letter infront and back
                ran= random.sample(r_l,3)
                for i in ran:
                    word1=i+word1
                ran= random.sample(r_l,3)
                for i in ran:
                    word1=word1+i
                print(word1,end=' ')
    except:
        print("\n got an error try again\n")

#Decoding is done here
elif choice==1:
    try:    
        user_text=user_text.split() # converted to list 
        for word in user_text:
            length=len(word)
            
            if 4 <= length <= 8:
                raise ValueError("We do not support other language input for decoding! Please enter language that is generated by us only.")
            if length<3 and length>0: # for less than 3 letters
            
                rev="" # block to reverse a list's every element
                for letter in word:
                        
                    rev=letter+rev
                print(rev,end=' ')

            else:
                word=word[3:-3] #random variables are now removed
                repword=word[-1] # last aplha to 1 st moved!
                word=word[:-1]
                word=repword+word
                print(word,sep=None,end=" ")
    except:
        print("\nerror occured! please try again!")







# improvement suggested by chat gpt!
        '''I'll provide a brief review and rating for the code you've shared:

1. **Readability (7/10):** The code has some comments, which is good for explaining its functionality. However,
the variable names could be more descriptive, making the code easier to understand.

2. **Error Handling (6/10):** The error handling in the code is somewhat limited. It checks for an integer input 
in the choice selection but doesn't handle other potential errors, such as non-integer inputs for the user text. 
More comprehensive error handling could improve the robustness of the program.

3. **User Interaction (8/10):** The program interacts with the user and provides clear prompts. However, the input 
validation could be improved to handle a wider range of scenarios.

4. **Functionality (7/10):** The code seems to encode and decode text as intended. However, there are some 
issues with the encoding process, such as the condition `if choice == 0 or 1:` which always evaluates to `True`. 
It should be `if choice == 0 or choice == 1:`. Additionally, the decoding process checks for a specific 
range of characters (4 <= length <= 8) and raises an error if it's not met. This restriction might be too rigid.

5. **Coding Style (6/10):** Some parts of the code could be more concise and adhere to a consistent coding style. 
For example, there are unnecessary comments and some redundant code that could be simplified.

6. **Functionality Logic (6/10):** The logic for encoding and decoding seems to work, but the encoding part 
is a bit convoluted. Consider breaking down the functionality into smaller functions for better readability 
and maintainability.

7. **Randomness Handling (7/10):** The use of randomness in the encoding process is interesting, but keep in mind 
that using `random.sample` could lead to repeated characters in the generated strings.

8. **Overall (7/10):** The code achieves its intended functionality, but it could benefit from improvements in 
readability, error handling, and coding style. Consider refactoring the code into smaller functions, enhancing 
error handling, and using more descriptive variable names to make it more maintainable and easier to understand.'''